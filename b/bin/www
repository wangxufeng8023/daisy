#!/usr/bin/env node

/**
 * @file 程序入口。
 * @author ruoshui_engr@163.com (Angela-1)
 * 本文件是 Daisy（雏菊） 项目的一部分。
 * 
 * © 2017 Angela 版权所有。代码开源仅用于学术交流分享，商业使用请联系作者。
 */

'use strict';

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('myapp:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * 获取主机 IP 地址，用于移动端打开
 */
let getIpAddr = function() {
  let os = require('os');
  let ifaces = os.networkInterfaces();

  let ip = '';
  let netname = ifaces['本地连接'] !== undefined ? '本地连接' : '无线网络连接';
  let network = ifaces[netname];

  for (let j in network) {
    if (network[j].family === 'IPv4') {
      ip = network[j].address;
    }
  }

  console.log('-------------------------------------');
  console.log('请在浏览器打开地址：', ip + ':' + port);
  console.log('-------------------------------------');

  // for (let ct in ifaces['en0']) {
  //   if (ifaces['en0'][ct].family === 'IPv4') {
  //     ip = ifaces['en0'][ct].address;
  //     console.log('------------------------------');
  //     console.log('请在浏览器打开地址：', ip + ':' + port);
  //     console.log('------------------------------');
  //   }
  // }
  return ip;
};

getIpAddr();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
